{"version":3,"sources":["api.tsx","Home.tsx","useWindowSize.tsx","AppRouter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["client","axios","create","baseURL","Home","useState","data","setData","filterText","setFilterText","size","width","window","innerWidth","height","innerHeight","setSize","useEffect","handleEvent","addEventListener","removeEventListener","useWindowsSize","filteredCountryList","useMemo","Countries","filter","contry","Object","values","join","includes","get","then","res","loading","countries","map","country","key","CountryCode","Country","NewConfirmed","className","type","value","onChange","e","target","undefined","Global","TotalConfirmed","AppRouter","path","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2PAEMA,E,OAASC,EAAMC,OAAO,CAC1BC,QAAS,gCCCEC,EAAqB,WAAO,IAAD,EACdC,qBADc,mBAC/BC,EAD+B,KACzBC,EADyB,OAEFF,mBAAiB,IAFf,mBAE/BG,EAF+B,KAEnBC,EAFmB,KAGhCC,ECLsB,WAAO,IAAD,EACVL,mBAA4C,CAClEM,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cAHiB,mBAC3BL,EAD2B,KACrBM,EADqB,KAoBlC,OAdAC,qBAAU,WACR,IAAMC,EAAc,WAClBF,EAAQ,CACNL,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,eAKnB,OAFAH,OAAOO,iBAAiB,SAAUD,GAE3B,WACLN,OAAOQ,oBAAoB,SAAUF,MAEtC,IAEIR,EDfMW,GACPC,EAAsBC,mBAAmC,WAAO,IAAD,EACnE,wBACEjB,QADF,IACEA,OADF,EACEA,EAAMkB,UAAUC,QAAO,SAACC,GAAD,OACrBC,OAAOC,OAAOF,GAAQG,KAAK,KAAKC,SAAStB,aAF7C,QAGO,KAEN,CAACA,EAAYF,IAEhBW,qBAAU,WDaHjB,EAAO+B,IAAkB,YCZjBC,MAAK,SAACC,GAAD,OAAS1B,EAAQ0B,EAAI3B,WACtC,IAEH,IAAM4B,EAAU,yCACVC,EAAYb,EAAoBc,KAAI,SAACC,GACzC,OACE,wBAAIC,IAAKD,EAAQE,aACdF,EAAQG,QADX,KACsBH,EAAQE,YAD9B,OAC+CF,EAAQI,aADvD,aAMJ,OACE,yBAAKC,UAAU,mEACb,wBAAIA,UAAU,YAAd,qBACA,uBAAGA,UAAU,oBAAb,iBACUhC,QADV,IACUA,OADV,EACUA,EAAMC,MADhB,oBACiCD,QADjC,IACiCA,OADjC,EACiCA,EAAMI,QAEvC,2BACE4B,UAAS,wDACNpC,EAAuB,GAAhB,eAEVqC,KAAK,OACLC,MAAOpC,EACPqC,SAAU,SAACC,GAAD,OAAOrC,EAAcqC,EAAEC,OAAOH,eAEhCI,IAAT1C,EACC,oCACE,uBAAGoC,UAAU,sBAAb,wBACiBpC,QADjB,IACiBA,OADjB,EACiBA,EAAM2C,OAAOC,gBAE9B,4BAAKf,IAGPD,IE/CKiB,EAA0B,WACrC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,SCDOC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7B1C,OAAO2C,SAASC,UAEe,UAA7B5C,OAAO2C,SAASC,UAEhB5C,OAAO2C,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f62ba710.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst client = axios.create({\n  baseURL: \"https://api.covid19api.com/\",\n});\n\nexport interface ISummaryData {\n  Global: {\n    NewConfirmed: number;\n    TotalConfirmed: number;\n    NewDeaths: number;\n    TotalDeaths: number;\n    NewRecovered: number;\n    TotalRecovered: number;\n  };\n  Countries: {\n    Country: string;\n    CountryCode: string;\n    Slug: string;\n    NewConfirmed: number;\n    TotalConfirmed: number;\n    NewDeaths: number;\n    TotalDeaths: number;\n    NewRecovered: number;\n    TotalRecovered: number;\n    Date: Date;\n  }[];\n}\nexport const getSummary = () => {\n  return client.get<ISummaryData>(\"/summary\");\n};\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { getSummary, ISummaryData } from \"./api\";\nimport { useWindowsSize } from \"./useWindowSize\";\n\nexport const Home: React.FC<{}> = () => {\n  const [data, setData] = useState<ISummaryData>();\n  const [filterText, setFilterText] = useState<string>(\"\");\n  const size = useWindowsSize();\n  const filteredCountryList = useMemo<ISummaryData[\"Countries\"]>(() => {\n    return (\n      data?.Countries.filter((contry) =>\n        Object.values(contry).join(\" \").includes(filterText)\n      ) ?? []\n    );\n  }, [filterText, data]);\n\n  useEffect(() => {\n    getSummary().then((res) => setData(res.data));\n  }, []);\n\n  const loading = <p>Loading...</p>;\n  const countries = filteredCountryList.map((country) => {\n    return (\n      <li key={country.CountryCode}>\n        {country.Country} ({country.CountryCode}) : {country.NewConfirmed} cases\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"flex w-screen min-h-screen justify-center items-center flex-col\">\n      <h1 className=\"text-6xl\">Covid Trainer !!!</h1>\n      <p className=\"text-l text-bold\">\n        width: {size?.width}, height: {size?.height}\n      </p>\n      <input\n        className={`border-solid border-2 rounded border-gray-600 ${\n          !data ? \"bg-gray-400\" : \"\"\n        }`}\n        type=\"text\"\n        value={filterText}\n        onChange={(e) => setFilterText(e.target.value)}\n      />\n      {data !== undefined ? (\n        <>\n          <p className=\"text-3xl text-bold\">\n            Global cases, {data?.Global.TotalConfirmed}\n          </p>\n          <ul>{countries}</ul>\n        </>\n      ) : (\n        loading\n      )}\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\nexport const useWindowsSize = () => {\n  const [size, setSize] = useState<{ width: number; height: number }>({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    const handleEvent = () => {\n      setSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n    window.addEventListener(\"resize\", handleEvent);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleEvent);\n    };\n  }, []);\n\n  return size;\n};\n","import React from \"react\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { Home } from \"./Home\";\n\nexport const AppRouter: React.FC<{}> = () => {\n  return (\n    <BrowserRouter>\n      <Route path=\"/\">\n        <Home />\n      </Route>\n    </BrowserRouter>\n  );\n};\n","import React from \"react\";\nimport { AppRouter } from \"./AppRouter\";\n\nfunction App() {\n  return <AppRouter />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./tailwind.generated.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}